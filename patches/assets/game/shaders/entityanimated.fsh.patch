--- a/assets/game/shaders/entityanimated.fsh
+++ b/assets/game/shaders/entityanimated.fsh
@@ -1,4 +1,4 @@
-#version 330 core
+ï»¿#version 330 core
 #extension GL_ARB_explicit_attrib_location: enable
 
 in vec2 uv;
@@ -6,6 +6,7 @@
 in vec4 rgbaFog;
 in float fogAmount;
 in float glowLevel;
+in vec3 vertexPosition;
 
 layout(location = 0) out vec4 outColor;
 layout(location = 1) out vec4 outGlow;
@@ -17,6 +18,8 @@
 #endif
 
 
+uniform float fogDensityIn;
+
 uniform sampler2D entityTex;
 uniform float alphaTest = 0.001;
 uniform float windWaveCounter;
@@ -38,7 +41,7 @@
 	float intensity = 0.45;
 	#endif
 
-	outColor = applyFogAndShadowWithNormal(texColor, fogAmount, normal, 1, intensity); // was 0.35. Made it match whats in chunkopaque.fsh so animated blocks don't change brightness
+	outColor = applyOverexposedFogAndShadow(texColor, fogAmount, normal, 1, intensity, vertexPosition, fogDensityIn); // was 0.35. Made it match whats in chunkopaque.fsh so animated blocks don't change brightness
 
 	//outColor.r = normal.x;
 	//outColor.g = normal.y;
@@ -60,10 +63,12 @@
 	glow = pow(max(0, dot(normal, lightPosition)), 6) / 8 * shadowIntensity * (1 - fogAmount);
 #endif
 
+	float scatterAmt = calculateVolumetricScatter(vertexPosition);
+
 #if SSAOLEVEL > 0
-	outGPosition = vec4(fragPosition.xyz, fogAmount + glowLevel);
+	outGPosition = vec4(fragPosition.xyz, fogAmount + glowLevel + scatterAmt * VOLUMETRIC_SSAO_DECLINE);
 	outGNormal = vec4(gnormal.xyz, 0);
 #endif
 
-	outGlow = vec4(glowLevel + glow, 0, 0, color.a);
+	outGlow = vec4(glowLevel + glow, scatterAmt, 0, color.a);
 }
\ No newline at end of file
