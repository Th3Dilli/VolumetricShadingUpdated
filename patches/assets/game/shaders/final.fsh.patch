--- a/assets/game/shaders/final.fsh
+++ b/assets/game/shaders/final.fsh
@@ -1,4 +1,4 @@
-#version 330 core
+ï»¿#version 330 core
 
 uniform sampler2D primaryScene;
 uniform sampler2D glowParts;  // The second color buffer (outGlow var)
@@ -6,12 +6,31 @@
 uniform sampler2D godrayParts;
 uniform sampler2D ssaoScene;
 
+#if VSMOD_SSR > 0
+uniform sampler2D ssrScene;
+
+#if VSMOD_REFRACT > 0 || VSMOD_CAUSTICS > 0
+uniform mat4 projectionMatrix;
+uniform sampler2D gpositionScene;
+uniform sampler2D gdepthScene;
+#endif
+
+#if VSMOD_REFRACT > 0
+uniform sampler2D refractionScene;
+#endif
+
+#if VSMOD_CAUSTICS > 0
+uniform sampler2D causticsScene;
+#endif
+
+#endif
+
 uniform float gammaLevel;
 uniform float brightnessLevel;
 uniform float sepiaLevel;
 uniform float damageVignetting;
 uniform float frostVignetting;
-uniform float extraGamma = 1.0;
+uniform float extraGamma = 1;
 uniform float windWaveCounter;
 uniform float glitchEffectStrength;
 
@@ -35,7 +54,7 @@
 
 vec4 ColorGrade(vec4 color) {
 	// I don't know why, but this seems to make the scene look a lot better
-	color.a = dot(color.rgb, vec3(0.299, 0.587, 0.114)); 
+	color.a = dot(color.rgb, vec3(0.299, 0.587, 0.114));
 	
 	vec3 hsl = rgb2hsl(color.rgb);
 
@@ -47,7 +66,7 @@
 	
 	
 	color.rgb = hsl2rgb(hsl);
-
+	
 	color.rgb = pow(color.rgb, vec3(1.0 / extraGamma));
 
 	color.rgb *= brightnessLevel;
@@ -84,6 +103,7 @@
 
 	
 	
+	
 	// Limit brightness
 	//float b = (color.r + color.b + color.g) / 3;
 	//color.rgb /= max(1, b);
@@ -94,21 +114,68 @@
 	return color;	
 }
 
+vec2 refractUV()
+{
+#if VSMOD_SSR > 0 && VSMOD_REFRACT > 0
+	vec4 startVPos = vec4(texture(gpositionScene, texCoord).xyz, 1);
+	vec4 startPos = projectionMatrix * startVPos;
+	startPos.xyz /= startPos.w;
+
+	float startPosDepth = startPos.z;
+	float startDepth = texture(gdepthScene, texCoord).r;
+	vec4 startSolPos = vec4(startPos.xy, startDepth, 1);
+
+	vec4 bumpTex = texture(refractionScene, texCoord);      // displace texture coordinates
+	vec2 bumpOffset = bumpTex.xy * 0.25 * (1.0 - bumpTex.w);
+	vec4 targetBump = texture(refractionScene, texCoord + bumpOffset);
+
+	vec2 refractedUV = texCoord + bumpOffset * (1.0 - targetBump.w);      // fetch refraction map
+
+	float endDepth = texture(gdepthScene, refractedUV).r;
+
+	if ((startPosDepth > endDepth) || (startDepth <= startPosDepth)) {
+		return texCoord;
+	}
+	
+	return refractedUV;
+#endif
+	return texCoord;
+}
+
 
 void main(void)
 {
+	vec2 refractedUV = refractUV();
+	
 	// FXAA precompiler constant is set by game engine
 	#if FXAA == 1
-		vec4 color = fxaaTexturePixel(primaryScene, texCoord, invFrameSize);
+		vec4 color = fxaaTexturePixel(primaryScene, refractedUV, invFrameSize);
 	#else
-		vec4 color = texture(primaryScene, texCoord);
-	#endif	
+		vec4 color = texture(primaryScene, refractedUV);
+	#endif
     
+#if VSMOD_SSR > 0 && VSMOD_CAUSTICS > 0
+	vec4 gposProj = projectionMatrix * vec4(texture(gpositionScene, refractedUV).xyz, 1);
+	gposProj = vec4(gposProj.xyz / gposProj.w, 1.0);
+	float gposDepth = gposProj.z;
+
+	float myDepth = texture(gdepthScene, refractedUV).r;
+	if (myDepth > gposDepth) {
+		float causticsStrength = texture(causticsScene, refractedUV).r;
+		color.rgb *= pow(causticsStrength * 2.0, 2);
+	}
+#endif
+
+#if VSMOD_SSR > 0
+	vec4 ssr = texture(ssrScene, texCoord);
+	color.rgb = mix(color.rgb, ssr.rgb, ssr.a);
+#endif
+
 	color.a=1;
 	float bloomSub = 0;
 	#if BLOOM == 1
-		vec4 bloomCol = texture(bloomParts, texCoord);
-		float glowLevel = texture(glowParts, texCoord).r;
+		vec4 bloomCol = texture(bloomParts, refractedUV);
+		float glowLevel = texture(glowParts, refractedUV).r;
 		
 		//vec3 blendedBloomCol = (bloomCol.rgb + color.rgb * (1-bloomCol.a));
 		//color.rgb = (color.rgb + blendedBloomCol) / 2;
@@ -121,26 +188,30 @@
 	#endif 
 
 	#if SSAOLEVEL > 0
-		color.rgb *= min(1, texture(ssaoScene, texCoord).r + bloomSub);
+		color.rgb *= min(1, texture(ssaoScene, refractedUV).r + bloomSub);
 		//if (texCoord.x < 0.5) {
-		//color.rgb = texture(ssaoScene, texCoord).rgb;
+		//	color.rgb = texture(ssaoScene, texCoord).rgb;
 		//}
 	#endif
 	
-	
 	#if GODRAYS > 0
-		vec4 grc = texture(godrayParts, texCoord) * 1;
-		color.rgb += grc.rgb;
-		color.rgb = min(color.rgb, vec3(1));
-		color.a=1;
+		vec4 grc = texture(godrayParts, refractedUV);
+		float maxComp = max(max(grc.r, grc.g), grc.b);
+		if (maxComp > 0.005) {
+			float scaleMul = 1.0 / maxComp;
+			grc *= scaleMul;
+			//color.rgb += grc.rgb * maxComp;
+			color.rgb = mix(color.rgb, grc.rgb*1.5, maxComp);
+			//color.rgb = grc.rgb * maxComp;
+			color.rgb = min(color.rgb, vec3(1));
+			color.a=1;
+		}
 	#endif
-	
+
 	vec4 gradedColor = ColorGrade(color);
-	
 	outColor = mix(color, gradedColor, gradedColor.a);
-	
-
 
+	
 	// Vignetting
 	vec2 position = (gl_FragCoord.xy * invFrameSize.xy) - vec2(0.5);
 	float grayvignette = 1 - smoothstep(1.1, 0.75 - 0.45, length(position));
@@ -184,4 +255,6 @@
 	outColor.rgb = mix(outColor.rgb, vec3(0), grayvignette);
 	
 	outColor.a=1;
+	
+	//outColor.rg=texCoord.xy;
 }
\ No newline at end of file
